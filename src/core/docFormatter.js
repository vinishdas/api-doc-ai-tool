// src/core/docFormatter.js
const fs = require('fs');
const path = require('path');

/**
 * Format a single endpoint's documentation markdown section.
 * @param {Object} endpoint
 * @param {string} endpoint.method - HTTP method (GET, POST, etc.)
 * @param {string} endpoint.path - API route path
 * @param {string} endpoint.docMarkdown - The markdown generated by LLM
 * @returns {string} Formatted markdown section
 */
function formatEndpointDoc({ method, path, docMarkdown }) {
  return `### ${method.toUpperCase()} ${path}

${docMarkdown}

---
`;
}

/**
 * Aggregate all endpoints' markdown documentation into one markdown string.
 * @param {Array} endpointDocs - Array of objects with method, path, docMarkdown
 * @returns {string} Complete markdown document string
 */
function aggregateDocs(endpointDocs) {
  // Header for API docs
  let markdown = `# API Documentation

Generated on ${new Date().toISOString()}

---

`;

  // Sort endpoints by path, then method alphabetically
  endpointDocs.sort((a, b) => {
    if (a.path < b.path) return -1;
    if (a.path > b.path) return 1;
    if (a.method < b.method) return -1;
    if (a.method > b.method) return 1;
    return 0;
  });

  // Append each endpoint's formatted markdown
  endpointDocs.forEach(endpoint => {
    markdown += formatEndpointDoc(endpoint);
  });

  return markdown;
}

/**
 * Write markdown string to a file.
 * @param {string} markdown - Full markdown content
 * @param {string} outputPath - File path to write markdown to (default: API.md)
 */
function writeMarkdownToFile(markdown, outputPath = 'API.md') {
  const absolutePath = path.resolve(outputPath);
  fs.writeFileSync(absolutePath, markdown, { encoding: 'utf8' });
  console.log(`Documentation written to ${absolutePath}`);
}

module.exports = {
  formatEndpointDoc,
  aggregateDocs,
  writeMarkdownToFile,
};
